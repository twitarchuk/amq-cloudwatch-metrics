#!/usr/local/bin/ruby
require 'rubygems'
require 'open-uri'
require 'xmlsimple'
require 'aws-sdk'
require 'logger'

$logger = Logger.new(STDOUT)
$logger.level = Logger::INFO
if ENV['LOG_VERBOSE'] == 'true'
  $logger.level = Logger::DEBUG
end

def main

  cw_region = ENV['CLOUDWATCH_REGION'] || 'ap-southeast-2'
  cw_namespace = ENV['CLOUDWATCH_NAMESPACE'] || 'ActiveMQ'
  cw_interval = ENV['CLOUDWATCH_INTERVAL_SEC'] || 5*60 #5 mintues

  environment_name = ENV['ENVIRONMENT'] || nil

  amq_url = ENV["AMQ_ADMIN_URL"]
  amq_user = ENV["AMQ_ADMIN_USER"] || 'admin'
  amq_pass = ENV["AMQ_ADMIN_PASS"] || 'admin'
  amq_queues_to_monitor = ENV["AMQ_QUEUES"] || nil

  if amq_url.nil? then
    $logger.error("please set AMQ_ADMIN_URL environment variable")
    exit 1
  end

  Aws.config.update({region: cw_region})
  cw_client = Aws::CloudWatch::Client.new()

  while true
    begin
      $logger.info("pubishing queue stats for #{amq_url} to cloudwatch")
      queues = fetch_queue_stats(amq_url, amq_user, amq_pass, amq_queues_to_monitor)
      publish_queue_stats(cw_client, cw_namespace, create_metric_data(queues, environment_name))
      $logger.info("pubished metrics for #{queues.size} queues")
    rescue Exception => e
      $logger.error("failed to publish stats - #{e}")
    end
    sleep(cw_interval.to_i)
  end
end

def fetch_queue_stats(url, user, pass, amq_queues_to_monitor)
  queues = []
  amq_queues = XmlSimple.xml_in(open(url,http_basic_authentication: [user, pass]))
  if amq_queues.empty?
    $logger.info("no queues found")
  else
    amq_queues['queue'].each do |queue|
      if should_monitor_queue(queue['name'], amq_queues_to_monitor)
        q = {}
        q['name'] = queue['name']
        q['stats'] = queue['stats'][0]
        queues << q
      end
    end
  end
  queues
end

def should_monitor_queue(queue, queue_list)
  queue_list.split(',').each do |queue_match|
    match = queue =~ /#{queue_match}/
    if !match.nil? && match >= 0
      return true
    end
  end unless queue_list.nil?
  return queue_list.nil?
end


def publish_queue_stats(cw_client, namespace, metic_data)
  batch_count = 0
  metic_data.each_slice(20) do |batch|
    put_metric_params = Aws::CloudWatch::Types::PutMetricDataInput.new({
      'namespace' => namespace,
      'metric_data' => batch
    })
    $logger.info("putting cloudwatch metric data batch  #{batch.size + (batch_count * batch.size)} of #{metic_data.size}")
    $logger.debug { "metic_data:#{batch}" }
    cw_client.put_metric_data(put_metric_params)
    batch_count = batch_count + 1
  end

end

def create_metric_data(queues, environment_name=nil)
  metic_data = []
  queues.each do |queue|
    dimensions = [{name: 'QueueName', value: queue['name']}]
    dimensions << {name: 'Environment', value: environment_name} unless environment_name.nil?
    metic_data << Aws::CloudWatch::Types::MetricDatum.new({ 'metric_name' => 'QueueDepth', 'value' => queue['stats']['size'], 'dimensions' => dimensions})
    metic_data << Aws::CloudWatch::Types::MetricDatum.new({ 'metric_name' => 'ConsumerCount', 'value' => queue['stats']['consumerCount'], 'dimensions' => dimensions})
    metic_data << Aws::CloudWatch::Types::MetricDatum.new({ 'metric_name' => 'EnqueueCount', 'value' => queue['stats']['enqueueCount'], 'dimensions' => dimensions})
    metic_data << Aws::CloudWatch::Types::MetricDatum.new({ 'metric_name' => 'DequeueCount', 'value' => queue['stats']['dequeueCount'], 'dimensions' => dimensions})
  end
  metic_data
end

main
